knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#Get Wall-sit Data - EDIT data directory
datadir<-'/Users/au651723/Library/CloudStorage/OneDrive-AarhusUniversitet/OneDrive_Aarhus_universitet/Aarhus/Presentations/appliedCS/wallsit_folder'
#Find files
files<-list.files(datadir,pattern='*csv',full.names=TRUE)
#Get Wall-sit Data - EDIT data directory
datadir<-'/Users/lauri/Desktop/CogNotes/Working Directories/Self talk and motivation/data_wallsit'
#Find files
files<-list.files(datadir,pattern='*csv',full.names=TRUE)
#Find files
files<-list.files(datadir,pattern='*csv',full.names=TRUE)
#Find files
files<-list.files(datadir,pattern='*csv',full.names=TRUE)
#files
dataWS<-data.frame()
#How many datasets were there
n_datasets_raw<-length(files)
#Prepare a variable to monitor how many datasets we keep
n_datasets<-0
#Prepare a variable to monitor how many points we originally had
n_datapoints_raw<-0
#Loop to go through all files in the list
for(iii in 1:n_datasets_raw){
#remove old loaded file to not risk importing it multiple times
if(exists('data_temp')) rm(data_temp)
#Load data
data_temp<-read.csv(files[iii])
#If this is the first time around the loop, make the currently loaded data into the actual data
if(length(colnames(dataWS))==0){
dataWS=data_temp
rm(data_temp)
#counter to monitor included datasets
n_datasets<-n_datasets+1
}
#Bind loaded data with compounded data
else {
dataWS<-rbind(dataWS,data_temp)
rm(data_temp)
#counter to monitor included datasets
n_datasets<-n_datasets+1
}
}
#A variable to monitor how many points we keep
n_datapoints<-length(dataWS[,1])
#remove data without a numeric variable in duration
dataWS$sit_duration <-as.numeric(dataWS$sit_duration)
View(dataWS)
#Making a histogram for sitting time.
hist(dataWS$sit_duration)
library(lmerTest)
library(lmerTest)
#Model using a mixed-effects model, include trial order
modelWS<-lmer(sit_duration~distraction +trial + (1|participant), data=dataWS)
#Model using a mixed-effects model, include trial order
modelWS<-lmer(sit_duration~distraction +trial + (1|participant), data=dataWS)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#Get Wall-sit Data - EDIT data directory
datadir<-'/Users/lauri/Desktop/CogNotes/Working Directories/Self talk and motivation/data_wallsit'
#Find files
files<-list.files(datadir,pattern='*csv',full.names=TRUE)
#files
dataWS<-data.frame()
#How many datasets were there
n_datasets_raw<-length(files)
#Prepare a variable to monitor how many datasets we keep
n_datasets<-0
#Prepare a variable to monitor how many points we originally had
n_datapoints_raw<-0
#Loop to go through all files in the list
for(iii in 1:n_datasets_raw){
#remove old loaded file to not risk importing it multiple times
if(exists('data_temp')) rm(data_temp)
#Load data
data_temp<-read.csv(files[iii])
#If this is the first time around the loop, make the currently loaded data into the actual data
if(length(colnames(dataWS))==0){
dataWS=data_temp
rm(data_temp)
#counter to monitor included datasets
n_datasets<-n_datasets+1
}
#Bind loaded data with compounded data
else {
dataWS<-rbind(dataWS,data_temp)
rm(data_temp)
#counter to monitor included datasets
n_datasets<-n_datasets+1
}
}
#A variable to monitor how many points we keep
n_datapoints<-length(dataWS[,1])
#remove data without a numeric variable in duration
dataWS$sit_duration <-as.numeric(dataWS$sit_duration)
#Making a histogram for sitting time.
hist(dataWS$sit_duration)
library(lmerTest)
#Model using a mixed-effects model, include trial order
modelWS<-lmer(sit_duration~distraction +trial + (1|participant), data=dataWS)
summary(modelWS)
library(ggplot2)
#Using a violin plot to get an illustration of the wall-sitting data
FigureWS<-ggplot(dataWS,aes(x=distraction, y=sit_duration,col=distraction))+geom_violin()+geom_point()
FigureWS
# visualise the effect of trial
ggplot(dataWS, aes(trial, sit_duration, color=distraction)) +
geom_point()
library(ggplot2)
#Use ggplot to plot the number of correctly spottet targets.
FigureWScor<-ggplot(dataWS,aes(x=distraction, y=true_pos,col=distraction))+geom_violin()+geom_point()
FigureWScor
library(psycho)
#Calculate d-prime for each condition
#Start by making a dummy variable
dataWS$dprime<-NA
#Make a loop to go through all rows in the data
for( iii in 1:dim(dataWS)[1]){
#Exclude the control tasks that have NAs as n_targets
if (is.na(dataWS$stim_count[iii])==FALSE){
#Avoid having to divide with zero. Turn zeros into another small number
if (dataWS$true_pos[iii]==0)dataWS$true_pos[iii]<-0.0001
if (dataWS$false_pos[iii]==0)dataWS$false_pos[iii]<-0.0001
#Use the dprime function from psycho package
dprime<- dprime(
n_hit = dataWS$true_pos[iii],
n_fa = dataWS$false_pos[iii],
n_targets = dataWS$total_matches[iii],
n_distractors = dataWS$stim_count[iii],
adjusted = FALSE
)
dataWS$dprime[iii]<-dprime$dprime
}
}
# Compare d-prime across conditions
library(lmerTest)
#Model using a mixed-effects model. Include trial order
data_temp<-subset(dataWS, !dprime==Inf & !dprime==-Inf)
modelWS2<-lmer(dprime~distraction + trial + (1|participant), data=dataWS)
summary(modelWS2)
rm(data_temp)
library(ggplot2)
#Use ggplot to plot memory peformance against wall-sitting.
data_temp<-subset(dataWS, !dprime==Inf & !dprime==-Inf)
FigureWSscat<-ggplot(dataWS,aes(x=dprime, y=sit_duration))+geom_smooth()+geom_point(aes(col=distraction))
FigureWSscat
rm(data_temp)
# Compare d-prime across conditions
library(lmerTest)
#Model using a mixed-effects model.
data_temp<-subset(dataWS, !dprime==Inf & !dprime==-Inf)
modelWS3<-lmer(sit_duration~distraction + dprime + (1|participant), data=data_temp)
summary(modelWS3)
rm(data_temp)
# visualise the effect of trial
ggplot(dataWS, aes(trial, sit_duration, color=distraction)) +
geom_point()
library(ggplot2)
#Use ggplot to plot the number of correctly spottet targets.
FigureWScor<-ggplot(dataWS,aes(x=distraction, y=true_pos,col=distraction))+geom_violin()+geom_point()
FigureWScor
library(psycho)
#Calculate d-prime for each condition
#Start by making a dummy variable
dataWS$dprime<-NA
#Make a loop to go through all rows in the data
for( iii in 1:dim(dataWS)[1]){
#Exclude the control tasks that have NAs as n_targets
if (is.na(dataWS$stim_count[iii])==FALSE){
#Avoid having to divide with zero. Turn zeros into another small number
if (dataWS$true_pos[iii]==0)dataWS$true_pos[iii]<-0.0001
if (dataWS$false_pos[iii]==0)dataWS$false_pos[iii]<-0.0001
#Use the dprime function from psycho package
dprime<- dprime(
n_hit = dataWS$true_pos[iii],
n_fa = dataWS$false_pos[iii],
n_targets = dataWS$total_matches[iii],
n_distractors = dataWS$stim_count[iii],
adjusted = FALSE
)
dataWS$dprime[iii]<-dprime$dprime
}
}
# Compare d-prime across conditions
library(lmerTest)
#Model using a mixed-effects model. Include trial order
data_temp<-subset(dataWS, !dprime==Inf & !dprime==-Inf)
modelWS2<-lmer(dprime~distraction + trial + (1|participant), data=dataWS)
summary(modelWS2)
rm(data_temp)
# Compare d-prime across conditions
library(lmerTest)
#Model using a mixed-effects model.
data_temp<-subset(dataWS, !dprime==Inf & !dprime==-Inf)
modelWS3<-lmer(sit_duration~distraction + dprime + (1|participant), data=data_temp)
summary(modelWS3)
rm(data_temp)
