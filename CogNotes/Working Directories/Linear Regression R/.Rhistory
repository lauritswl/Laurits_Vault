library(tidyverse)
library(tidyverse)
#load data
child <- read_delim("ChildAggression.dat", delim = ' ')
head(child)
#make a linear model
m <- lm(Aggression ~ Television, child)
#see results of model fit to data
summary(m)
#plot the data
ggplot(child, aes(Television, Aggression)) +  #base layer
geom_point() + #scatter plot
ggtitle('Scatter plot')
#writing down the model summary
sum_m <- summary(m)
#extracting intercept and slope from the model summary using index
int <- sum$coefficients[1] #the first element is intercept
slope <- sum_m$coefficients[2] #the second element is slope
#extracting intercept and slope from the model summary using index
int <- sum_m$coefficients[1] #the first element is intercept
slope <- sum_m$coefficients[3] #the second element is slope
slope <- sum_m$coefficients[3] #the second element is slope
slope <- sum_m$coefficients[2] #the second element is slope
slope <- sum_m$coefficients[3] #the second element is slope
slope <- sum_m$coefficients[2] #the second element is slope
#plot the line
ggplot(child, aes(Television, Aggression)) +    #base layer
geom_point() +                                #scatter plot
geom_abline(intercept = int, slope = slope) + #drawing a line with intercept and slope we wrote down from model summary
ggtitle('Scatter plot with the regression line: manually')
#... or just use geom_smooth(method = lm) to plot that line automatically  (does not show extrapolation)
ggplot(child, aes(Television, Aggression)) +
geom_point() +
geom_smooth(method = lm) + #fit the best straight line to the data
ggtitle('Scatter plot with the regression line: quicker using default geom_smooth for lm')
#same but without the confidence intervals around the line
ggplot(child, aes(Television, Aggression)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) + #fit the best straight line to the data, don't show confidence intervals
ggtitle('Scatter plot with the regression line: geom_smooth without confidence intervals ')
#... or just use geom_smooth(method = lm) to plot that line automatically  (does not show extrapolation)
ggplot(child, aes(Television, Aggression)) +
geom_point() +
geom_smooth(method = lm) + #fit the best straight line to the data
ggtitle('Scatter plot with the regression line: quicker using default geom_smooth for lm')
#same but without the confidence intervals around the line
ggplot(child, aes(Television, Aggression)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) + #fit the best straight line to the data, don't show confidence intervals
ggtitle('Scatter plot with the regression line: geom_smooth without confidence intervals ')
CG_Tel <- lm(Aggression ~ Computer_Games + Television, child)
CG_Tel_lm <- lm(Aggression ~ Computer_Games + Television, child)
library(tidyverse)
#load data
child <- read_delim("ChildAggression.dat", delim = ' ')
head(child)
#make a linear model
m <- lm(Aggression ~ Television, child)
#see results of model fit to data
summary(m)
#plot the data
ggplot(child, aes(Television, Aggression)) +  #base layer
geom_point() + #scatter plot
ggtitle('Scatter plot')
#writing down the model summary
sum_m <- summary(m)
#extracting intercept and slope from the model summary using index
int <- sum_m$coefficients[1] #the first element is intercept
slope <- sum_m$coefficients[2] #the second element is slope
#plot the line
ggplot(child, aes(Television, Aggression)) +    #base layer
geom_point() +                                #scatter plot
geom_abline(intercept = int, slope = slope) + #drawing a line with intercept and slope we wrote down from model summary
ggtitle('Scatter plot with the regression line: manually')
#... or just use geom_smooth(method = lm) to plot that line automatically  (does not show extrapolation)
ggplot(child, aes(Television, Aggression)) +
geom_point() +
geom_smooth(method = lm) + #fit the best straight line to the data
ggtitle('Scatter plot with the regression line: quicker using default geom_smooth for lm')
#same but without the confidence intervals around the line
ggplot(child, aes(Television, Aggression)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) + #fit the best straight line to the data, don't show confidence intervals
ggtitle('Scatter plot with the regression line: geom_smooth without confidence intervals ')
CG_Tel_lm <- lm(Aggression ~ Computer_Games + Television, child)
summary(CG_Tel_lm)
#check cor()
cor(child)
#same, but rounded to 2 decimal points
round(cor(child),2) #much better! but still hard to see
#same, but rounded to 2 decimal points
round(cor(child),2) #much better! but still hard to see
pacman::p_load(ggplot2, reshape2)
pacman::p_load(ggplot2, reshape2)
#plot as heatmap
qplot(x=Var1, y=Var2,
data=melt(cor(child, use="p")),
fill=value,
geom="tile") +
scale_fill_gradient2(limits=c(-1, 1))
pacman::p_load(ggplot2, reshape2)
#plot as heatmap
qplot(x=Var1, y=Var2,
data=melt(cor(child, use="p")),
fill=value,
geom="tile") +
scale_fill_gradient2(limits=c(-1, 1))
##### Highlight only the 'worrying' correlation values
#plot only values above .7
plot_df <- melt(cor(child))
plot_df$value[plot_df$value < 0.7 & plot_df$value > - 0.7] = 0
qplot(x=Var1, y=Var2, data=plot_df, fill=value, geom="tile") +
scale_fill_gradient2(limits=c(-1, 1))
View(child)
# Predictor = Television
ggplot(child, aes(Television, Aggression)) +
geom_point() +
geom_smooth(method = lm)+
ggtitle("Television")
# Predictor = Television
child %>%
ggplot(aes(Television, Aggression)) +
geom_point() +
geom_smooth(method = lm)+
ggtitle("Television")
data %>%
ggplot(aes(Outcome,Predictor)) +
stat_qq() +
stat_qq_line()
data %>%
ggplot(aes(Outcome,Predictor)) +
stat_qq() +
stat_qq_line()}
data %>%
ggplot(aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Television")}
Scatterplot_lm <- function(data, Predictor, Outcome) {
data %>%
ggplot(aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Television")
}
Scatterplot_lm <- function(data, Predictor, Outcome, title)
Scatterplot_lm <- function(data, Predictor, Outcome, title) {
data %>%
ggplot(aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("title")
}
Scatter
data %>%
ggplot(aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("title")
Scatterplot_lm <- function(data, Predictor, Outcome) {
data %>%
ggplot(aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
}
# Predictor = Television
Scatterplot_lm(child,Television,Aggression,Television)
# Predictor = Television
Scatterplot_lm(child,Television,Aggression)
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
ggplot(data,aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
ggplot(data,aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
ggplot(df,aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
ggplot(data,aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
ggplot(data,aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
data %>%
ggplot(aes(Outcome,Predictor))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
data %>%
ggplot(aes(Predictor,Outcome))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
Scatterplot_lm <- function(datae, Predictor, Outcome) {
datae %>%
ggplot(aes(Predictor,Outcome))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
}
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
Scatterplot_lm <- function(data, Predictor, Outcome) {
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("Predictor")
}
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
# Predictor = Computer
Scatterplot_lm(child, Predictor, Aggression)
# Predictor = Computer
Scatterplot_lm(child, Computer, Aggression)
# Predictor = Computer_Games
Scatterplot_lm(child, Computer_Games, Aggression)
# Predictor =
Scatterplot_lm(child, Sibling_Aggression, Aggression)
# Predictor =
Scatterplot_lm(child, Sibling_Aggression, Aggression)
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("{{Predictor}}")
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle("{{Predictor}}")
# Predictor = Television
Scatterplot_lm(child, Television, Aggression,"Television")
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle({{Predictor}})
# Predictor = Television
Scatterplot_lm(child, Television, Aggression,"Television")
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle(" ")
# Predictor = Television
Scatterplot_lm(child, Television, Aggression,"Television")
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
Scatterplot_lm <- function(data, Predictor, Outcome) {
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle(" ")
}
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
# Predictor =
Scatterplot_lm(child, Sibling_Aggression, Aggression)
# Predictor =
Scatterplot_lm(child, Diet, Aggression)
# Predictor =
Scatterplot_lm(child, Parenting_Style, Aggression)
Scatterplot_lm <- function(data, Predictor, Outcome) {
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle(" ")
}
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
# Predictor = Computer_Games
Scatterplot_lm(child, Computer_Games, Aggression)
# Predictor = Sibling_Aggression
Scatterplot_lm(child, Sibling_Aggression, Aggression)
# Predictor = Diet
Scatterplot_lm(child, Diet, Aggression)
# Predictor = Parenting_Style
Scatterplot_lm(child, Parenting_Style, Aggression)
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle(" ")+
xlim(-5, 5)
Scatterplot_lm <- function(data, Predictor, Outcome) {
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle(" ")+
xlim(-5, 5)
}
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
# Predictor = Computer_Games
Scatterplot_lm(child, Computer_Games, Aggression)
# Predictor = Sibling_Aggression
Scatterplot_lm(child, Sibling_Aggression, Aggression)
# Predictor = Diet
Scatterplot_lm(child, Diet, Aggression)
# Predictor = Parenting_Style
Scatterplot_lm(child, Parenting_Style, Aggression)
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle(" ")
Scatterplot_lm <- function(data, Predictor, Outcome) {
data %>%
ggplot(aes({{Predictor}},{{Outcome}}))+
geom_point()+
geom_smooth(method = lm)+
ggtitle(" ")
}
# Predictor = Television
Scatterplot_lm(child, Television, Aggression)
# Predictor = Computer_Games
Scatterplot_lm(child, Computer_Games, Aggression)
# Predictor = Sibling_Aggression
Scatterplot_lm(child, Sibling_Aggression, Aggression)
# Predictor = Diet
Scatterplot_lm(child, Diet, Aggression)
# Predictor = Parenting_Style
Scatterplot_lm(child, Parenting_Style, Aggression)
#see results of model fit to data
test_m<- summary(m)
test_m$r.squared
#make a linear model
m <- lm(Aggression ~ Television, child)
#see results of model fit to data
#See adjusted r.squared
test_Tel<- summary(lm(Aggression ~ Television, child))
Television = test_Tel$adj.r.squared
test_CG<- summary(lm(Aggression ~ Television, child))
Computer_Games = test_CG$adj.r.squared
Computer_Games = test_CG$adj.r.squared
"Computer_Games" = test_CG$adj.r.squared
test_CG$adj.r.squared
Television = test_Tel$adj.r.squared
Television = test_Tel$adj.r.squared
Television = test_Tel$call
test_Tel$call
test_Tel
#make a linear model
m <- lm(Aggression ~ Television, child)
#see results of model fit to data
#See adjusted r.squared
test_Tel<- summary(lm(Aggression ~ Television, child))
test_Tel$call
test_Tel$adj.r.squared
test_CG<- summary(lm(Aggression ~ Computer_Games, child))
test_CG$call
test_CG$adj.r.squared
#make a linear model
m <- lm(Aggression ~ Television, child)
#see results of model fit to data
#See adjusted r.squared
test_Tel<- summary(lm(Aggression ~ Television, child))
test_Tel$adj.r.squared
test_CG<- summary(lm(Aggression ~ Computer_Games, child))
test_CG$adj.r.squared
knitr::opts_chunk$set(echo = TRUE)
# import/load packages
# LSAfun is used for the semantic analysis. We will load a pretrained semantic model to get semantic distances between each animal name. See more documentation here: https://cran.r-project.org/web/packages/LSAfun/LSAfun.pdf
# ggrepel is a package that allow us to show text in ggplot without it overlapping with the data points (it provides an improved alternative to geom_text())
# ape is a package that we can use to make fancy dendogram network plots
pacman::p_load(tidyverse, LSAfun, ggrepel, ape, plyr, dplyr, ggplot2)
# Load the semantic model which is trained on 2 Billion word corpus, which consist of the British National Corpus (BNC), the ukWaC corpus and a 2009 Wikipedia dump
load("EN_100k.rda")
# Here you can play with the function that will return the semantic distance between two words
distance("lion", "tiger", method="euclidean", tvectors=EN_100k)
# Load the semantic model which is trained on 2 Billion word corpus, which consist of the British National Corpus (BNC), the ukWaC corpus and a 2009 Wikipedia dump
load("EN_100k.rda")
# Here you can play with the function that will return the semantic distance between two words
distance("lion", "ape", method="euclidean", tvectors=EN_100k)
# Here you can play with the function that will return the semantic distance between two words
distance("lion", "hammer", method="euclidean", tvectors=EN_100k)
# Here you can play with the function that will return the semantic distance between two words
distance("nail", "hammer", method="euclidean", tvectors=EN_100k)
# Here you can play with the function that will return the semantic distance between two words
distance("chicken", "rooster", method="euclidean", tvectors=EN_100k)
# Here you can play with the function that will return the semantic distance between two words
distance("chicken", "egg", method="euclidean", tvectors=EN_100k)
# Here you can play with the function that will return the semantic distance between two words
distance("lion", "tiger", method="euclidean", tvectors=EN_100k)
# Here you can play with the function that will return the semantic distance between two words
distance("fox", "badger", method="euclidean", tvectors=EN_100k)
# Load your logfile from the animal association game
?ldply()
pacman::p_load(tidyverse, LSAfun, ggrepel, ape, plyr, dplyr, ggplot2,readbulk)
pacman::p_load(tidyverse, LSAfun, ggrepel, ape, plyr, dplyr, ggplot2,readbulk)
pacman::p_load(tidyverse, LSAfun, ggrepel, ape, plyr, dplyr, ggplot2, readbulk)
# Load your logfile from the animal association game
raw_data <- read_bulk(directory = "Logfiles",
extension = ".csv")
View(raw_data)
laurits <- read_csv(Logfiles/logfile_Laurits_2021_Nov_02_0924.csv)
laurits <- read_csv(Logfiles\logfile_Laurits_2021_Nov_02_0924.csv)
laurits <- read_csv(./Logfiles/logfile_Laurits_2021_Nov_02_0924.csv)
laurits <- read_csv("./Logfiles/logfile_Laurits_2021_Nov_02_0924.csv")
View(laurits)
# Investigating word frequency
raw_data %>%
group_by=word %>%
summarise()
# Investigating word frequency
raw_data %>%
group_by = raw_data$word %>%
summarise()
# Investigating word frequency
raw_data %>%
group_by(word) %>%
summarise(n())
# Investigating word frequency
raw_data %>%
group_by(word) %>%
summarise()
#For test:
pacman::p_load(tm, tau, readr, plotly)
knitr::opts_chunk$set(echo = TRUE)
# import/load packages
# LSAfun is used for the semantic analysis. We will load a pretrained semantic model to get semantic distances between each animal name. See more documentation here: https://cran.r-project.org/web/packages/LSAfun/LSAfun.pdf
# ggrepel is a package that allow us to show text in ggplot without it overlapping with the data points (it provides an improved alternative to geom_text())
# ape is a package that we can use to make fancy dendogram network plots
pacman::p_load(tidyverse, LSAfun, ggrepel, ape, plyr, dplyr, ggplot2, readbulk)
#For test:
pacman::p_load(tm, tau, readr, plotly)
# Investigating word frequency
mpg %>%
group_by(word) %>%
summarise(sum_word = sum(word))
# Investigating word frequency
mpg %>%
summarise(sum_word = sum(word))
# Investigating word frequency
mpg %>%
summarise(sum_word = n(word))
# Investigating word frequency
raw_data %>%
summarise(sum_word = n(word))
?tally()
# Investigating word frequency
data %>%
group_by(word) %>%
tally %>%
arrange(desc(n)) %>%
mutate(word = fct_reorder(word, n)) %>%
head(15) %>%
ggplot() +
aes(n, word, fill = n) +
geom_col() +
theme_minimal() +
theme(legend.position = "none")
# Investigating word frequency
raw_data %>%
group_by(word) %>%
tally %>%
arrange(desc(n)) %>%
mutate(word = fct_reorder(word, n)) %>%
head(15) %>%
ggplot() +
aes(n, word, fill = n) +
geom_col() +
theme_minimal() +
theme(legend.position = "none")
# Investigating word frequency
freq_data<-raw_data %>%
group_by(word) %>%
tally %>%
arrange(desc(n)) %>%
mutate(word = fct_reorder(word, n))
View(freq_data)
freq_data %>%
head(15) %>%
ggplot() +
aes(n, word, fill = n) +
geom_col() +
theme_minimal() +
theme(legend.position = "none")
