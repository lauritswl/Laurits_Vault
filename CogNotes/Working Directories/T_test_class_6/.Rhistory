pacman::p_load(tidyverse)
#get a vector with names of files using list.files()
files <- list.files(path = "data",".")          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
#get a vector with names of files using list.files()
files <- list.files(path = "logfile",".")          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
#get a vector with names of files using list.files()
files <- list.files(path = "files",".")          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
#get a vector with names of files using list.files()
files <- list.files(path = "files",".")          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
#get a vector with names of files using list.files()
files <- list.files(path = "data","."          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
pattern = ".csv",       #everything that contains '.csv' in its name will be listed
#get a vector with names of files using list.files()
files <- list.files(path = "data","."          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
pattern = ".csv",       #everything that contains '.csv' in its name will be listed
#get a vector with names of files using list.files()
files <- list.files(path = "data",".",          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
pattern = ".csv",       #everything that contains '.csv' in its name will be listed
full.names = T)         #makes it include directory path, so instead of 'logfile_1.csv' it will be 'data/logfile_1.csv')
?list.files()
#get a vector with names of files using list.files()
files <- list.files(path = "data",".",          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
pattern = ".csv",       #everything that contains '.csv' in its name will be listed
full.names = TRUE)         #makes it include directory path, so instead of 'logfile_1.csv' it will be 'data/logfile_1.csv')
#get a vector with names of files using list.files()
files <- list.files(path = ".",          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
pattern = ".csv",       #everything that contains '.csv' in its name will be listed
full.names = TRUE)         #makes it include directory path, so instead of 'logfile_1.csv' it will be 'data/logfile_1.csv')
# Let's check if it looks alright (probably doesn't)
View(data)
get.wd()
#get a vector with names of files using list.files()
files <- list.files(path = ".",          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
pattern = ".csv",       #everything that contains '.csv' in its name will be listed
full.names = TRUE)         #makes it include directory path, so instead of 'logfile_1.csv' it will be 'data/logfile_1.csv')
# read all the files into a tibble (a fancy df) by applying read_csv() to every filename in files vector
# and binding them together automagically
# NB: Assumes data looks EXACTLY the same for all y'all, so beware!
data <- map_dfr(files, read_csv)
# Let's check if it looks alright (probably doesn't)
View(data)
## Common problems ##
# 1 #
# Error: Can't combine `ID` <some_type> with `ID`<other_type>
# Issue: the column was saved as different data types
# Fix: add this line after read_csv: col_types = cols(ID=col_character())
# 2 #
# Too many columns with a bunch of NA's O.o #
# Issue: you didn't name the columns the exact same things (i.e RT vs rt)
# Fix: mutate a true column using if_else (look up using "?if_else") e.g. "mutate(RT = if_else(is.na(rt), RT, rt))"
#An alternative way is to use:
readbulk::read_bulk("logfiles", extension = ".csv") #While this is smart
#An alternative way is to use:
readbulk::read_bulk("logfiles", extension = ".csv") #While this is smart
knitr::opts_chunk$set(echo = T)
pacman::p_load(tidyverse)
pacman:p_load(readbulk)
knitr::opts_chunk$set(echo = T)
pacman::p_load(tidyverse)
pacman::p_load(readbulk)
pacman::p_load(WRS2)
#An alternative way is to use:
readbulk::read_bulk("logfiles", extension = ".csv") #While this is smart
#try and get used to doing it with lapply() as this is a neat function used many times.
View(data)
#get a vector with names of files using list.files()
files <- list.files(path = ".",          #PUT THE NAME OF YOUR FOLDER WITH DATA HERE, it also might need '/' in the end, experiment with it :)
pattern = ".csv",       #everything that contains '.csv' in its name will be listed
full.names = TRUE)         #makes it include directory path, so instead of 'logfile_1.csv' it will be 'data/logfile_1.csv')
# read all the files into a tibble (a fancy df) by applying read_csv() to every filename in files vector
# and binding them together automagically
# NB: Assumes data looks EXACTLY the same for all y'all, so beware!
data <- map_dfr(files, read_csv)
# Let's check if it looks alright (probably doesn't)
View(data)
## Common problems ##
# 1 #
# Error: Can't combine `ID` <some_type> with `ID`<other_type>
# Issue: the column was saved as different data types
# Fix: add this line after read_csv: col_types = cols(ID=col_character())
# 2 #
# Too many columns with a bunch of NA's O.o #
# Issue: you didn't name the columns the exact same things (i.e RT vs rt)
# Fix: mutate a true column using if_else (look up using "?if_else") e.g. "mutate(RT = if_else(is.na(rt), RT, rt))"
#Try performing the default t-test using formula: Measure ~ Group
#Example (you might need to change dataframe name and variable names)
t.test(ReactionTime ~ Gender, data = data)
#change 'var.equal' argument to True to perform a student's t-test, rather than the default Welch's
data %>% t.test(ReactionTime ~ Gender)
#change 'var.equal' argument to True to perform a student's t-test, rather than the default Welch's
data %>%
t.test(ReactionTime ~ Gender)
#change 'var.equal' argument to True to perform a student's t-test, rather than the default Welch's
t.test(ReactionTime ~ Gender, data = data, var.equal = TRUE)
#set 'paired' argument to True to perform a paired (dependent) t-test (might not work due to our experimental design)
t.test(Measure ~ Group, data = , paired = TRUE)
#set 'paired' argument to True to perform a paired (dependent) t-test (might not work due to our experimental design)
t.test(ReactionTime ~ Gender, data = data, paired = TRUE)
t.test(data$Reaction_Time, mu = 0.5)  #a one sample t-test: is mean of our sample different from the theoretical mean of 0.5
t.test(data$ReactionTime, mu = 0.5)  #a one sample t-test: is mean of our sample different from the theoretical mean of 0.5
#An example
WRS2::yuen(ReactionTime ~ Gender, data = data)
#probably won't work since our experiment was not actually repeated measures design, so I commented it out
WRS2::yuen(data$ReactionTime, data$Gender, tr =0.2)
round(pastecs::stat.desc(cbind(data$ReactionTime, data$Gender), basic =
FALSE, norm = TRUE,desc = F), digits = 2)
round(pastecs::stat.desc(cbind(data$ReactionTime), basic =
FALSE, norm = TRUE,desc = F), digits = 2)
round(pastecs::stat.desc(
cbind(DF$X1, DF$X2),
basic = FALSE, norm = TRUE,desc = F),
digits = 2)
round(pastecs::stat.desc(
cbind(DF$X1, DF$X2),
basic = FALSE, norm = TRUE,desc = F),
digits = 2)
round(pastecs::stat.desc(
cbind(data$ReactionTime, DF$X2),
basic = FALSE, norm = TRUE,desc = F),
digits = 2)
round(pastecs::stat.desc(
cbind(data$ReactionTime),
basic = FALSE, norm = TRUE,desc = F),
digits = 2)
round(pastecs::stat.desc(
cbind(data$ReactionTime),
basic = FALSE, norm = TRUE,desc = F),
digits = 2)
ggplot(data, aes(ReactionTime, fill="pink")) +
geom_density(alpha=.5)
ggplot(data, aes(sample = ReactionTime))+
stat_qq()+
stat_qq_line(color="red")+
labs(x = "Theoretical Quantiles",
y = "Sample Quantiles",
title = "QQ-plot of breathhold")+
theme_bw()
ggplot(data, aes(ReactionTime, fill=pink)) +
geom_density(alpha=.5)
ggplot(data, aes(ReactionTime, fill="pink")) +
geom_density(alpha=.5)
ggplot(data, aes(ReactionTime)) +
geom_density(alpha=.5,fill="pink")
trans_df <- data %>%
mutate(
logRT = log(ReactionTime),
sqrtRT = sqrt(ReactionTime),
recipRT = 1/(ReactionTime))
View(trans_df)
round(pastecs::stat.desc(
cbind(trans_df$ReactionTime,
trans_df$logRT,
trans_df$sqrtRT,
trans_df$recipRT,
),
basic = FALSE, norm = TRUE,desc = F),
digits = 2)
round(pastecs::stat.desc(
cbind(trans_df$ReactionTime,
trans_df$logRT,
trans_df$sqrtRT,
trans_df$recipRT
),
basic = FALSE, norm = TRUE,desc = F),
digits = 2)
round(pastecs::stat.desc(
cbind(RT = trans_df$ReactionTime,
trans_df$logRT,
trans_df$sqrtRT,
trans_df$recipRT
),
basic = FALSE, norm = TRUE,desc = F),
digits = 2)
